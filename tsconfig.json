{
    "compilerOptions": {
        "allowSyntheticDefaultImports": true,
        "allowUnreachableCode": true, // 不报告执行不到的代码错误。
        "allowUnusedLabels": false, // 不报告未使用的标签错误
        "alwaysStrict": false, // 以严格模式解析并为每个源文件生成 "use strict"语句
        "baseUrl": ".", // 工作根目录
        "experimentalDecorators": true, // 启用实验性的ES装饰器
        "moduleResolution": "node", // 制定模块解析策略
        "jsx": "react", // 在 .tsx文件里支持JSX
        "sourceMap": true, // 是否生成map文件
        "module": "commonjs", // 指定生成哪个模块系统代码
        "noImplicitAny": false, // 是否默认禁用 any
        "removeComments": true, // 是否移除注释
        "types": [ //指定引入的类型声明文件，默认是自动引入所有声明文件，一旦指定该选项，则会禁用自动引入，改为只引入指定的类型声明文件，如果指定空数组[]则不引用任何文件
            "node", // 引入 node 的类型声明
        ],
        "paths": { // 指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样
            // "src": [ //指定后可以在文件之直接 import * from 'src';
            //     "./src"
            // ],
            "@src/*": [
                "src/*"
            ],
        },
        /* 指定 ECMAScript 的目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
        "target": "ES5",
        "outDir": "./dist", // 输出目录
        // "declaration": true, // 是否自动创建类型声明文件
        // "declarationDir": "./lib", // 类型声明文件的输出目录
        "allowJs": true, // 允许编译javascript文件。
        "lib": [ /* 指定要包含在编译中的库文件——引用类库——即申明文件，如果输出的模块方式是 es5，就会默认引入 "dom","es5","scripthost" 。如果在 TS 中想要使用一些 ES6 以上版本的语法，就需要引入相关的类库 */
            "es5",
            "es6",
            "es7",
            "esnext",
            "dom",
            "dom.iterable",
            "scripthost"
        ],
    },
    // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
    "include": [
        "src"
    ],
    // 指定一个排除列表（include的反向操作）
    "exclude": [
        "node_modules",
        "build",
        "dist",
        "scripts",
        "acceptance-tests",
        "webpack",
        "jest",
        "src/setupTests.ts",
        "*.js"
    ]
}